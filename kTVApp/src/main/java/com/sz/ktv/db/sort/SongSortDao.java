package com.sz.ktv.db.sort;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import com.sz.ktv.db.Song;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class SongSortDao extends AbstractDao<Song, Long> {

//    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _SONG_ID = new Property(0, Long.class, "id", true, "_id");
        public final static Property _SONG_NO = new Property(1, String.class, "song_no", false, "song_no");
        public final static Property _SONG_LANGUAGE = new Property(2, String.class, "song_language", false, "song_language");
        public final static Property _SONG_NAME = new Property(3, String.class, "song_name", false, "song_name");
        public final static Property _SONG_FIRST_NAME = new Property(4, String.class, "song_first_name", false, "song_first_name");
        public final static Property _SONG_WORDS_COUNT = new Property(5, String.class, "song_words_count", true, "song_words_count");
        public final static Property _SONG_SINGER_NAME = new Property(6, String.class, "song_singer_name", false, "song_singer_name");
        public final static Property _SONG_CLASS = new Property(7, String.class, "song_class", false, "song_class");
        public final static Property _SONG_DANCE_TYPE = new Property(8, String.class, "song_dance_type", false, "song_dance_type");
        public final static Property _SONG_FILEM_TYPE = new Property(9, String.class, "song_film_type", false, "song_film_type");
        public final static Property _SONG_POPULAR_TYPE = new Property(10, String.class, "song_popular_type", false, "song_popular_type");
        public final static Property _SONG_DOWNLOAD_FLAG = new Property(11, String.class, "song_download_flag", false, "song_download_flag");
        public final static Property _SONG_CLICK_COUNT = new Property(12, Long.class, "song_click_count", false, "song_click_count");
        public final static Property _SONG_FILE_NAME = new Property(13, String.class, "song_file_name", false, "song_file_name");
        public final static Property _SONG_CLICK_TIME = new Property(14, Long.class, "song_click_time", false, "song_click_time");
        
         
    };


    public SongSortDao(DaoConfig config) {
        super(config);
    }
    
    public SongSortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /* The field of the table */
	public static final String _SONG_NO = "song_no";
	public static final String _SONG_LANGUAGE = "song_language";
	public static final String _SONG_NAME = "song_name";
	public static final String _SONG_FIRST_NAME = "song_first_name";
	public static final String _SONG_WORDS_COUNT = "song_words_count";
	public static final String _SONG_SINGER_NAME = "song_singer_name";
	public static final String _SONG_TRACK = "song_track";
	public static final String _SONG_LEFT_VOLUME = "song_left_volume";
	public static final String _SONG_RIGHT_VOLUME = "song_right_volume";
	public static final String _SONG_CLASS = "song_class";
	public static final String _SONG_DANCE_TYPE = "song_dance_type";
	public static final String _SONG_FILEM_TYPE = "song_film_type";
	public static final String _SONG_POPULAR_TYPE = "song_popular_type";
	public static final String _SONG_DOWNLOAD_FLAG = "song_download_flag";
	public static final String _SONG_CLICK_COUNT = "song_click_count";
	public static final String _SONG_FILE_NAME = "song_file_name";
	public static final String _SONG_CLICK_TIME ="song_click_time";
	
	/**
	 * 表名称
	 */
	public static final String TABLENAME = "sort_song";
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    	
      String SQL_CREATE_TABLE = String
    			.format("create table  IF NOT EXISTS %s(%s integer primary key autoincrement,%s char(8) UNIQUE,%s char(1),%s char(50),%s char(50)"
    					+ ",%s char(2),%s char(20),%s char(1),%s char(1),%s char(1)"
    					+ ",%s char(1),%s char(1),%s char(20),%s char(15),%s interger)",
    					TABLENAME, Song._ID,_SONG_NO, _SONG_LANGUAGE, _SONG_NAME,
    					_SONG_FIRST_NAME, _SONG_WORDS_COUNT, _SONG_SINGER_NAME,
    					_SONG_CLASS, _SONG_DANCE_TYPE, _SONG_FILEM_TYPE,
    					_SONG_POPULAR_TYPE, _SONG_DOWNLOAD_FLAG, _SONG_CLICK_COUNT,
    					_SONG_FILE_NAME,_SONG_CLICK_TIME);
    	
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL(SQL_CREATE_TABLE); // 3: age
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\""+TABLENAME+"\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
//        _SONG_NO, _SONG_LANGUAGE, _SONG_NAME,
//		_SONG_FIRST_NAME, _SONG_WORDS_COUNT, _SONG_SINGER_NAME,
//		_SONG_CLASS, _SONG_DANCE_TYPE, _SONG_FILEM_TYPE,
//		_SONG_POPULAR_TYPE, _SONG_DOWNLOAD_FLAG, _SONG_CLICK_COUNT,
//		_SONG_FILE_NAME,_SONG_CLICK_TIME
//		
        String songNo = entity.getSong_no();
        if(!TextUtils.isEmpty(songNo))
        {
        	stmt.bindString(2, songNo);
        }
        String songLanguage = entity.getSong_language();
        if(!TextUtils.isEmpty(songLanguage))
        {
        	stmt.bindString(3, songLanguage);
        }
        
        String songName = entity.getSong_name();
        if(!TextUtils.isEmpty(songName))
        {
        	stmt.bindString(4, songName);
        }
        
        String songFirstName = entity.getSong_first_name();
        if(!TextUtils.isEmpty(songFirstName))
        {
        	stmt.bindString(5, songFirstName);
        }
        String songWordCount = entity.getSong_words_count();
        if(!TextUtils.isEmpty(songLanguage))
        {
        	stmt.bindString(6, songWordCount);
        }
        
        String songSinger = entity.getSong_singer_name();
        if(!TextUtils.isEmpty(songSinger))
        {
        	stmt.bindString(7, songSinger);
        }
        
        String songClass = entity.getSong_class();
        if(!TextUtils.isEmpty(songClass))
        {
        	stmt.bindString(8, songClass);
        }
        String songDanceType = entity.getSong_dance_type();
        if(!TextUtils.isEmpty(songDanceType))
        {
        	stmt.bindString(9, songDanceType);
        } 
        String songFilmType = entity.getSong_film_type();
        if(!TextUtils.isEmpty(songFilmType))
        {
        	stmt.bindString(10, songFilmType);
        } 
        String songPopularType = entity.getSong_popular_type();
        if(!TextUtils.isEmpty(songPopularType))
        {
        	stmt.bindString(11, songPopularType);
        } 
        String songDownLoadFlag = entity.getSong_download_flag();
        if(!TextUtils.isEmpty(songDownLoadFlag))
        {
        	stmt.bindString(12, songDownLoadFlag);
        }
       
        int  songClickCount = entity.getSong_clickCount();
        
        	stmt.bindLong(13, songClickCount);
         
        String songFileName = entity.getSong_file_name();
        if(!TextUtils.isEmpty(songFileName))
        {
        	stmt.bindString(14, songFileName);
        }
        int songClickTime = entity.getSong_clickTime();
        
        stmt.bindLong(15, songClickTime);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Song readEntity(Cursor cursor, int offset) {
//    	Song entity = new Song( //
//            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
//            cursor.getString(offset + 1), // firstname
//            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastname
//            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // age
//        );
//    	_SONG_NO, _SONG_LANGUAGE, _SONG_NAME,
//		_SONG_FIRST_NAME, _SONG_WORDS_COUNT, _SONG_SINGER_NAME,
//		_SONG_CLASS, _SONG_DANCE_TYPE, _SONG_FILEM_TYPE,
//		_SONG_POPULAR_TYPE, _SONG_DOWNLOAD_FLAG, _SONG_CLICK_COUNT,
//		_SONG_FILE_NAME,_SONG_CLICK_TIME
    	
    	Song entity = new Song();

    	int songId = (int)cursor.getLong(offset + 0) ;
    	String songNo = cursor.getString(offset + 1) ;
    	String songLanguage = cursor.getString(offset + 2) ;
    	String songName = cursor.getString(offset + 3) ;
    	String songFirstName = cursor.getString(offset + 4) ;
    	String songWordCount = cursor.getString(offset + 5) ;
    	String songSiner = cursor.getString(offset + 6) ;
    	String songClass = cursor.getString(offset + 7) ;
    	String songDanceType = cursor.getString(offset + 8) ;
    	String songFilmType = cursor.getString(offset + 9) ;
    	String songPopularType = cursor.getString(offset + 10) ;
    	String songDownFlag = cursor.getString(offset + 11) ;
    	int songClickCount = (int)cursor.getLong(offset + 12) ;
    	String songFileName = cursor.getString(offset + 13) ;
    	int songCickTime = (int)cursor.getLong(offset + 14) ;
    	
    	entity.setRowid(songId);
    	entity.setSong_no(songNo);
    	entity.setSong_language(songLanguage);
    	entity.setSong_name(songName);
    	entity.setSong_first_name(songFirstName);
    	entity.setSong_words_count(songWordCount);
    	entity.setSong_singer_name(songSiner);
    	entity.setSong_class(songClass);
    	entity.setSong_dance_type(songDanceType);
    	entity.setSong_film_type(songFilmType);
    	entity.setSong_popular_type(songPopularType);
    	entity.setSong_download_flag(songDownFlag);
    	entity.setSong_clickCount(songClickCount);
    	entity.setSong_clickTime(songCickTime);
    	entity.setSong_file_name(songFileName);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
    	entity.setRowid((int) cursor.getLong(offset + 0));
    	entity.setSong_no( cursor.getString(offset + 1));
    	entity.setSong_language( cursor.getString(offset + 2));
    	entity.setSong_name( cursor.getString(offset + 3));
    	entity.setSong_first_name( cursor.getString(offset + 4));
    	entity.setSong_words_count( cursor.getString(offset + 5));
    	entity.setSong_singer_name( cursor.getString(offset + 6));
    	entity.setSong_class( cursor.getString(offset + 7));
    	entity.setSong_dance_type( cursor.getString(offset + 8));
    	entity.setSong_film_type( cursor.getString(offset + 9));
    	entity.setSong_popular_type( cursor.getString(offset + 10));
    	entity.setSong_download_flag( cursor.getString(offset + 11));
    	entity.setSong_clickCount( (int)cursor.getLong(offset + 12));
    	entity.setSong_clickTime((int) cursor.getLong(offset + 13));
    	entity.setSong_file_name( cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setRowid((int)rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return (long)entity.getRowid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
